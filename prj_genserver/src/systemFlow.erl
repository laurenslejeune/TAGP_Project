-module(systemFlow).
-behaviour(gen_server).
-define(EPS,0.00000000000000000001).
-export([handle_call/3,handle_cast/2,terminate/2]).
-export([create/3,init/1,update/1,getSystemFlow/1,stopSystemFlow/1]).


create(ListOfPumpInstances,FlowMeter,Delay)->
    gen_server:start_link(?MODULE,[{ListOfPumpInstances,FlowMeter,Delay}],[]).

init([{ListOfPumpInstances,FlowMeter,Delay}]) ->
    survivor:entry(systemFlow_created),
    {ok, UpdaterPid} = updater:create(self(),Delay,systemFlow),
    {ok,{ListOfPumpInstances,FlowMeter,0,0,UpdaterPid}}.
    %loop({ListOfPumpInstances,FlowMeter,0,0,RegisterPid,1}).

update(Pid)->
    gen_server:cast(Pid,update).

stopSystemFlow(Pid)->
    gen_server:stop(Pid).

getSystemFlow(Pid)->
    msg:get(Pid,get_flow).

handle_call({get_flow,_Ref},_,{ListOfPumpInstances,FlowMeter,Time,CurrentFlow,UpdaterPid})->
    {reply,{Time,CurrentFlow},{ListOfPumpInstances,FlowMeter,Time,CurrentFlow,UpdaterPid}}.

handle_cast(update,{ListOfPumpInstances,FlowMeter,Time,CurrentFlow,UpdaterPid})->
    PipeInfluence = getPipeInfluence(CurrentFlow,FlowMeter),     
    AreAllPumpsOff = areAllPumpsOff(ListOfPumpInstances),
    if(AreAllPumpsOff==true) ->
        NewFlow = CurrentFlow - abs(PipeInfluence);
    true->
        %Calculate the new flow generated by the pumps
        %First calculate the total maximum force that can be delivered by all pumps together:
        MaxForce = getMaxForce(ListOfPumpInstances),
        NewFlow = getNewFlow((CurrentFlow+PipeInfluence),ListOfPumpInstances,0,MaxForce)
    end,
    {noreply,{ListOfPumpInstances,FlowMeter,Time+1,NewFlow,UpdaterPid}}.

terminate(Reason,{_,_,_,_,UpdaterPid})->
    UpdaterPid ! stop,
    {ok,Reason}.

getNewFlow(Flow,[NextPump|Others],NewFlow,MaxForce) ->
    %Get the flow influence for this pump
    {ok,InfluenceFn} = pumpInst:flow_influence(NextPump),
    
    %Calculate this pumps contribution in the total flow
    %io:format("Pumpflow = ~p / ~p * ~p|MaxForce ought to be ~p~n",[InfluenceFn(0),MaxForce,Flow,getMaxForce([NextPump]++Others)]),
    PumpFlow = InfluenceFn(0) / (MaxForce+?EPS) * Flow,
    
    %Calculate the force corresponding this influence
    AdditionalForce = InfluenceFn(PumpFlow),
    %Calculate the flow generated using this force
    AdditionalFlow = getFlow(AdditionalForce),
    %io:format("Additional force is ~p, additional flow is ~p~n",[AdditionalForce,AdditionalFlow]),
    getNewFlow(Flow,Others,NewFlow+AdditionalFlow,MaxForce);

getNewFlow(_,[],NewFlow,_)->
    NewFlow.

getPipeInfluence(Flow,FlowMeter)->
    {ok,Influence}=flowMeterInst:estimate_flow(FlowMeter,{0,Flow}),
    %io:format("Flow is ~p, influence is ~p~n",[Flow,Influence]),
    Influence.

getFlow(Force)->
    %Derivation refer to .xlsx file
    10 -((-5/4)+(math:sqrt(2025-8*Force)/4)).

%% In max force calculation:
%% If the pump is turned off, let it contribute its max force as 1,
%% As a zero may result in a division

getMaxForce(Pumps)->
    getMaxForce(Pumps,0).

getMaxForce([P],Force)->
    {ok,InfluenceFn} = pumpInst:flow_influence(P),
    Force + InfluenceFn(0);

getMaxForce([P|Pumps],Force)->
    {ok,InfluenceFn} = pumpInst:flow_influence(P),
    getMaxForce(Pumps,Force+InfluenceFn(0)).

areAllPumpsOff([P]) ->
    {ok,OnOff} = pumpInst:is_on(P),
    if(OnOff==off) ->
        true;
    true->
        false
    end;

areAllPumpsOff([P|Pumps]) ->
    {ok,OnOff} = pumpInst:is_on(P),
    if(OnOff==off) ->
        areAllPumpsOff(Pumps);
    true->
        false
    end.

% pumpsOnOff([P],List)->
%     {ok,OnOff} = pumpInst:is_on(P),
%     List++[OnOff];

% pumpsOnOff([P|Pumps],List)->
%     {ok,OnOff} = pumpInst:is_on(P),
%     pumpsOnOff(Pumps,List++[OnOff]).