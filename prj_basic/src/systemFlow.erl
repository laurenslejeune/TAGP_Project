-module(systemFlow).
-define(EPS,0.00000000000000000001).
-export([create/3,init/1,loop/1]).

create(ListOfPumpInstances,FlowMeter,RegisterPid)->
    {ok,spawn(?MODULE,init,[{ListOfPumpInstances,FlowMeter,RegisterPid}])}.

init({ListOfPumpInstances,FlowMeter,RegisterPid}) ->
    survivor:entry(systemFlow_created),
    RegisterPid ! {new_flow,{0,0}},
    loop({ListOfPumpInstances,FlowMeter,0,0,RegisterPid,1}).

loop({ListOfPumpInstances,FlowMeter,Time,CurrentFlow,RegisterPid,Delay})->
    
    receive
        stop -> 
            ok;
        {change_delay,NewDelay} ->
            io:format("Switched flow update delay to ~p~n",[NewDelay]),
            loop({ListOfPumpInstances,FlowMeter,Time,CurrentFlow,RegisterPid,NewDelay})
        %We calculate the current flow every 1ms
        after Delay ->
            %CurrentPumpForce = getCurrentPumpForce(CurrentFlow,),
            %Calculate the influence of the pipes on the current flow
            PipeInfluence = getPipeInfluence(CurrentFlow,FlowMeter),

            
            AreAllPumpsOff = areAllPumpsOff(ListOfPumpInstances),
            if(AreAllPumpsOff==true) ->
                NewFlow = CurrentFlow - abs(PipeInfluence);
            true->
                %Calculate the new flow generated by the pumps
                %First calculate the total maximum force that can be delivered by all pumps together:
                MaxForce = getMaxForce(ListOfPumpInstances),
                NewFlow = getNewFlow((CurrentFlow+PipeInfluence),ListOfPumpInstances,0,MaxForce)
            end,
            %io:format("~p~n",[pumpsOnOff(ListOfPumpInstances,[])]),
            %io:format("~p|~p|Current flow is ~p, Pipe influence is ~p, NewFlow is ~p~n",[AreAllPumpsOff,Time,CurrentFlow,PipeInfluence,NewFlow]),

            %Store the new flow
            RegisterPid ! {new_flow,{Time+1,NewFlow}},

            loop({ListOfPumpInstances,FlowMeter,Time+1,NewFlow,RegisterPid,Delay})
    end.



getNewFlow(Flow,[NextPump|Others],NewFlow,MaxForce) ->
    %Get the flow influence for this pump
    {ok,InfluenceFn} = pumpInst:flow_influence(NextPump),
    
    %Calculate this pumps contribution in the total flow
    %io:format("Pumpflow = ~p / ~p * ~p|MaxForce ought to be ~p~n",[InfluenceFn(0),MaxForce,Flow,getMaxForce([NextPump]++Others)]),
    PumpFlow = InfluenceFn(0) / (MaxForce+?EPS) * Flow,
    
    %Calculate the force corresponding this influence
    AdditionalForce = InfluenceFn(PumpFlow),
    %Calculate the flow generated using this force
    AdditionalFlow = getFlow(AdditionalForce),
    %io:format("Additional force is ~p, additional flow is ~p~n",[AdditionalForce,AdditionalFlow]),
    getNewFlow(Flow,Others,NewFlow+AdditionalFlow,MaxForce);

getNewFlow(_,[],NewFlow,_)->
    NewFlow.

getPipeInfluence(Flow,FlowMeter)->
    {ok,Influence}=flowMeterInst:estimate_flow(FlowMeter,{0,Flow}),
    %io:format("Flow is ~p, influence is ~p~n",[Flow,Influence]),
    Influence.

getFlow(Force)->
    %Derivation refer to .xlsx file
    10 -((-5/4)+(math:sqrt(2025-8*Force)/4)).

%% In max force calculation:
%% If the pump is turned off, let it contribute its max force as 1,
%% As a zero may result in a division

getMaxForce(Pumps)->
    getMaxForce(Pumps,0).

getMaxForce([P],Force)->
    {ok,InfluenceFn} = pumpInst:flow_influence(P),
    Force + InfluenceFn(0);

getMaxForce([P|Pumps],Force)->
    {ok,InfluenceFn} = pumpInst:flow_influence(P),
    getMaxForce(Pumps,Force+InfluenceFn(0)).

areAllPumpsOff([P]) ->
    {ok,OnOff} = pumpInst:is_on(P),
    if(OnOff==off) ->
        true;
    true->
        false
    end;

areAllPumpsOff([P|Pumps]) ->
    {ok,OnOff} = pumpInst:is_on(P),
    if(OnOff==off) ->
        areAllPumpsOff(Pumps);
    true->
        false
    end.

% pumpsOnOff([P],List)->
%     {ok,OnOff} = pumpInst:is_on(P),
%     List++[OnOff];

% pumpsOnOff([P|Pumps],List)->
%     {ok,OnOff} = pumpInst:is_on(P),
%     pumpsOnOff(Pumps,List++[OnOff]).